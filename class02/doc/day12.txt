# day12

*****
함수의 오버로딩(Overloading : 함수의 중첩)
==> 원칙적으로 같은 클래스내에서는 함수의 이름은 모두 달라야 한다.
	같은 내에서 이름이 같은 함수가 존재하면 에러가 발생한다.
	
	이렇게 작성하다보면 가독성에 문제가 발생한다.
	즉, 가독성이란 ???
	함수의 이름만 봐도 그 함수가 어떤 기능을 가지고 있는 함수인지를 알아야 하는데...
	함수의 이름을 모두 다르게 만든다면...
	==> 가독성에 있어서 문제 발생할 수 있다.
	
	이런 문제를 해결하기 위해서 도입된 문법이 있는데
	이 문법이 함수의 오버로딩(함수의 중첩)이다.
	
	오버로딩이란???
	같은 클래스내에서 같은 이름의 함수를 만들 수 있다.
	단, 조건은 반드시 지켜줘야 한다.
	
	*****
	0. 	오버로딩 하려는 함수가 존재해야 한다.
	1. 	함수의 이름이 같아야 한다.
	2. 	매개변수의 갯수, 순서, 형태 중 하나 이상이 달라야 한다.
		매개변수 리스트의 형태가 달라야 한다.
	3. 	반환값과 상관이 전혀 없다.
	
	예 ] 
		
		void abc(){
		}
		float abc(){ ----------------------------- X
		// 반환 값 과는 상관없다.
		}
		void abc(int a){
		// 매개변수 리스트의 형태가 다르다.
		}
		int abc(int b, int c){
		// 매개변수 리스트의 형태가 다르다.
		}
		int abc(int a){ -------------------------- X
		// 반환값 과는 상관 없다.
		}
		void abc(int a, String s){	-------------- O
		// 매개변수 리스트의 형태가 다르다.
		}
		void abc(String s, int a){	-------------- O
		// 매개변수 리스트의 형태가 다르다.
		}
		
	결론 ]
		
		함수를 호출할 때 정확한 함수를 선택할 수 있도록 해야 한다.
		
		
		예 ]
			
			public class Test {
				
				public Test(){
					abc();	---------> 1번 함수 호출
					abc(10); --------> 2번 함수 호출
					abc(10, 5); -----> 3번 함수 호출 
				}
				void abc(){	----------------------------- 1
				}
				void abc(int a){ ------------------------ 2
				// 매개변수 리스트의 형태가 다르다.
				}
				int abc(int b, int c){ ------------------ 3
				// 매개변수 리스트의 형태가 다르다.
				}
			}
			
	참고 ]
		
		다른 사람이 만든 클래스(API등...)에도 오버로딩이 구현된 함수를 볼 수 있다.
		이들 함수를 사용하는 방법
		원하는 기능을 하는 함수가 요구하는 데이터를 
		형태와 순서에 맞춰서 정확하게 입력해서 호출하면 된다.
		
		참고 ]
			
			형태가 맞지 않더라도 실행되는 경우가 있는데...
			이런 경우는 자동 형변환이 되는 경우는 형태가 맞지 않더라도 실행이 된다.
			
			
			
			