# day14

Object 클래스
==> 자바로 만든 클래스의 최상위 super 클래스의 역할을 하는 클래스이다.
	따라서 자바로 만든 모든 클래스는 Object 클래스가 제공하는 
	모든 기능( 멤버 - 변수, 함수 ) 를 자동적으로 사용할 수 있게 된다.
	
	참고 ]
		이처럼 최상위 클래스를 만들어 놓은 이유는???
		계층추적을 원할히 하도록 하기 위한 조치...
		즉, 각각의 클래스의 족보를 정확하게 따질 수 있도록 하기 위해서...
		
	참고 ]
		자바로 만든 모든 클래스는 반드시 상위 클래스를 가지고 있다.
		지금까지 만든 클래스들도 상위 클래스를 가지고 있다.
		만약 강제로 상위 클래스를 지정하지 않으면
		묵시적으로 Object 라는 클래스를 상속 받아서 만들어진다.
		

**
instanceof
==> 특정 클래스를 new 시키면 주소가 만들어지는데
	이 주소가 어떤 클래스 소속인지를 알아내는 연산자이다.
	연산의 결과는 true, false (논리값)으로 나온다.
	
	형식 ]
		
		주소	instanceof 	클래스이름
		
	의미 ]
		주소가 가리키는 곳의 내용이
		지정한 클래스 소속인지를 물어보는 것
		(클래스이름 의 인스턴스냐??? )
		
	참고 ]
		소속이라는 개념은 is a 관계를 따져주는 것이다.
		상속 관계를 따지는 개념이 소속이 된다.
		
	------------------------------------------------------------------------------------------------
	
	
	class Grand {
		void abc(){
			System.out.println("여기는 할아버지 함수");
		}
	}
	
	class Father extends Grand {
		void abc(){
			System.out.println("여기는 아부지 함수");
		}
		void xyz(){
			System.out.println("여기는 아부지 xyz() 함수");
		}
	}
	
	class Son extends Father {
		void xyz(){
			System.out.println("여기는 아들이 고침");
		}
		
		void zzz(){
		}
	}
	
	class GrandChild extends Son {
		void abc(){
			System.out.println("여기는 아들의 아들이 고쳐씀");
		}
	}
	
	Grand g = new Son();
	g.xyz();	-------------------- X : Grand의 멤버로 xyz() 가 없다.
	g.abc();	-------------------- O : 아부지가 함수를 수정해 놓았고 아들은 수정하지 않고 그대로 사용할 수 있는 상태다.
										 그런데 함수의 경우는 인스턴스 쪽의 제일 마지막에 오버라이딩한 함수를 호출하게 된다.
										 따라서 아부지가 수정한 함수가 호출이 된다.
