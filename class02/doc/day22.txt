# day22

Set 계열
	입력한 순서대로 보관하고 있을 보장이 없다.
	(나름의 규칙에 따라서 내부적으로 정렬을 해서 보관한다.)
	중복된 데이터는 한번만 저장한다.
	( 	같은 데이터가 다시 저장되면
		먼저 데이터를 지우고, 
		새로운 데이터로 입력한다. )
		
	1. HashSet
		==> HashCode를 이용해서 정렬해서 보관하는 방식의 컬렉션이다.
			따라서 우리가 생각하는 정렬이 이루어지지 않는다.
			
		# 아래는 몰라도 됩니다...
		------------------------------------------------------------
		HashSet(int initialCapacity, float loadFactor)
			
			loadFactor 는 해쉬코드값을 만드는 규칙에 사용할 상수값을
			사용자 지정하면서 해쉬테이블을 만들어서 사용한다.
		------------------------------------------------------------
		
		참고 ]
			Set 계열은 컬렉션을 꺼내는 기능이 없다.
			==> 이유는 개발자가 데이터가 저장된 장소를 모르기 때문에....
				특정 위치를 지정하면서 데이터를 꺼낼 수 없다.
				
				1. 따라서 Iterator로 변환해서 순서대로 꺼내서 사용하도록 하고있다.
				2. List 계열의 객체를 만들때 Set 데이터를 넣어서 만들어서 꺼내면 된다.
				
				
				
----------------------------------------------------------------------------------------------------------------------------------------

	2. TreeSet
	==> 내부적으로 Tree Sort라는 알고리즘을 이용해서 
		데이터를 보관하는 기능을 가진 컬렉션의 일종
		
		특징 ]
			우리가 상상하는 정렬방식을 이용한다.
			
		생성방법 ]
			
			TreeSet(Comparator comparator)
			==> 정렬 방식을 변경해서 TreeSet을 만든다.
			
			TreeSet(SortedSet<E> s)
			==> TreeSet을 이용해서 다시 TreeSet을 만든다.
			
		참고함수 ]
			
			subSet(E fromElement, E toElement)
			==> 하나의 Set에 담긴 내용중에서 특정 부분만 골라서 새로운 Set을 만들어 준다.
			
			headSet(E toElement)
			==> 처음부터 지정한 부분까지 골라서 새로운 Set을 만든다.
			
			tailSet(E from Element)
			==> 지정한 부분부터 마지막까지 골라서 새로운 Set을 만든다. 