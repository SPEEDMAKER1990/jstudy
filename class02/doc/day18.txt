# day18

사용자 예외 클래스 만들기
==> 예외 클래스는 예외의 발생 원인을 알려주는 역할을 담당한다.
	그런데 예외의 원인이 자바가 알고 있지 않은 클래스라면 
	파악을 할 수 없다.
	
	이런 경우 사용자가 예외 정보를 만들어주는 클래스를 따로 만들어서 사용할 수 있다.
	
	방법 ]
		
		1. Exception 클래스를 상속 받은 클래스를 제작한다.
		2. toString() 를 오버라이드하여
			예외의 원인을 출력할 수 있도록 한다.
			
---------------------------------------------------------------------------------------------------------------

강제 예외 던지기(강제 예외 발생)
==> JVM은 예외로 인정하지 않는데
	(==> 예외처리가 필요하지 않는데...)
	프로그램의 목적상 예외로 인정해야 하는 경우가 있을 수 있다.
	
	예 ]
		1 ~ 10 사이의 숫자만 입력받고 싶다.
		음수는 입력을 받고 싶지 않은 경우....
		
		이런경우에 사용자가 이것은 문제가 있다고
		JVM에게 강제로 알려주는 방법이다.
		
	형식 ]
		
		throw new 예외클래스이름();
		
	주의 ]
		
		예외 전이
			함수에 사용하는 기법
			
			형식 ]
					throws 예외클래스이름
					
		예외 던지기
			명령문
			
			형식 ]
					
					throw 예외클래스인스턴스;
			
-------------------------------------------------------------------------------------------------------------------
예외 전이하기
==> 함수는 프로그램의 가장 작은 단위로
	한가지 작업을 하기 위해서 만든 것이다.
	따라서 함수 안에서 작업을 하다가 예외가 발생하면
	그 함수는 더 이상 실행할 필요가 없는 경우가 많다.
	따라서 함수는 예외를 전이하도록 해 놓은 경우가 있다.
	( 
	==> 	예외 발생하면 그 명령에서 예외 처리를 해줘야 하는데
			그 명령에서 하지 않고
			함수를 호출한 곳으로 예외 처리를 떠넘기는 경우가 있는데
			이것을 예외 전이라 한다.
	)
	
	형식 ]
		
		[접근지정자] [속성]	반환값타입	함수이름(매개변수리스트)	throws 예외클래스1, 예외클래스2,... {
		}
		
	의미 ]
		지정한 예외가 발생하면
		이 함수는 더이상 실행해도 의미가 없으므로
		실행을 중지시킨다.
		
	*****
	예외가 전이된 함수는
	그 함수를 호출한(사용하는) 곳에서 반드시 예외 처리를 해줘야 한다.
	
	참고 ]
		==> 비록 어떤 함수가 예외를 전이하는 함수라도
			예외 처리를 하지 않아도 되는 경우가 있다.
			
			예외가 RuntimeException 의 하위 클래스인 경우에는
			예외처리를 해도 그만, 안해도 그만이다.
			(주로 java.lang 소속 클래스에 있는 함수들이 이런 함수들이 많이 존재한다.)
			
			하지만 될 수 있으면 해주는 것이 좋다.
			
	함수의 오버라이딩 규칙 ]
		
		0.	상속을 받아야한다.
		1. 	함수의 원형을 유지한다.
		2.  접근 지정자는 같거나 넓은 방향으로
		3.  예외 처리는 같거나 좁은 방향으로...(같거나 하위의 예외를 전이할 것...)
	
		